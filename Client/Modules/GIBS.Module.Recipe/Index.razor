@using GIBS.Module.Recipe.Services
@using GIBS.Module.Recipe.Models
@using CategoryModel = GIBS.Module.Recipe.Models.Category

@namespace GIBS.Module.Recipe
@inherits ModuleBase
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer
@inject ISettingService SettingService

<div>
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Recipe" ResourceKey="Add" IconName="plus" IconOnly />
    <ActionLink Action="List" Security="SecurityAccessLevel.Edit" Text="Manage" ResourceKey="Manage" />
   
</div>

<div class="container" id="gibs-recipe">
    <div class="row">
        <div class="col-lg-9">
            @if (_selectedRecipeId.HasValue)
            {
                @if (_selectedRecipe != null)
                {
                    <div class="recipe-details-card">
                        <img src="@(_selectedRecipe.ImageURL ?? ModulePath() + "/images/no-image.png")"
                             alt="@_selectedRecipe.Name"
                             class="recipe-details-image float-end" />
                        <h1 class="recipe-title">@_selectedRecipe.Name
                            <ActionLink Action="Edit" Parameters="@($"id={_selectedRecipe.RecipeId}")" ResourceKey="Edit" IconName="pencil" IconOnly Text="Edit" 
                            Security="SecurityAccessLevel.Edit" Class="btn btn-outline-secondary btn-sm" />
                        </h1>              
                        <div class="mb-2">
                            <div>@_selectedRecipe.Description</div>
                        </div>
                        <div class="mb-2">
                            <div style="white-space: pre-line;">@_selectedRecipe.Instructions</div>
                        </div>
                        <div class="mb-2">
                            <strong>@Localizer["Servings"]:</strong> @_selectedRecipe.Servings
                        </div>
                        <div class="mb-2">
                            <strong>@Localizer["PrepTime"]:</strong> @_selectedRecipe.PrepTime
                        </div>
                        <div class="mb-2">
                            <strong>@Localizer["CookTime"]:</strong> @_selectedRecipe.CookTime
                        </div>
                        <div class="mb-2">
                            
                            @if (_selectedRecipeCategories != null && _selectedRecipeCategories.Count > 0)
                            {
                                
                                <ul class="list-inline">
                                    @foreach (var cat in _selectedRecipeCategories)
                                    {
                                        <li class="list-inline-item badge bg-secondary mb-2 fs-6"><span class="oi oi-aperture" aria-hidden="true"></span> @cat.Category?.Name</li>
                                    }
                                </ul>

                            }
                            
                        </div>
                        @if (_selectedRecipeIngredients != null && _selectedRecipeIngredients.Count > 0)
                        {
                            <div class="mb-3 mt-2">
                                <h5>@Localizer["Ingredients"]</h5>
                                <ul class="list-group">
                                    @foreach (var ri in _selectedRecipeIngredients)
                                    {
                                        <li class="list-group-item">
                                            <strong>@ri.Ingredient?.Name</strong>
                                            @if (ri.Quantity > 0)
                                            {
                                                <span>: @(" " + FormatQuantity(ri.Quantity) + " ") </span>
                                            }
                                            @if (ri.Unit != null)
                                            {
                                                <span> @ri.Unit.Name </span>
                                            }
                                            @if (!string.IsNullOrWhiteSpace(ri.Notes))
                                            {
                                                <span> - @ri.Notes</span>
                                            }
                                        </li>
                                    }
                                </ul>
                            </div>
                        }

                        @if (_selectedRecipeSteps != null && _selectedRecipeSteps.Count > 0)
                        {
                            <div class="mb-3">
                                <h5>@Localizer["Steps"]</h5>
                                <ul class="list-group">
                                    @foreach (var step in _selectedRecipeSteps.OrderBy(s => s.Name))
                                    {
                                        <li class="list-group-item">
                                            @if (!string.IsNullOrWhiteSpace(step.ImageURL))
                                            {
                                                <img src="@step.ImageURL" alt="@step.Name" class="recipe-thumbnail float-end" />
                                            }
                                            <strong>@(step.Name?.Replace("Step 0", "Step ").Trim())</strong>
                                            <span style="white-space: pre-line;">@step.Instructions</span>
                                           
                                        </li>
                                    }
                                </ul>
                            </div>
                        }

                    </div>
                }
                else
                {
                    <div class="alert alert-warning">@Localizer["NoRecipeFound"]</div>
                }
            }
            else
            {
                @* Show FEATURED recipes if no category or recipe is selected *@
                @if (!_selectedCategoryId.HasValue)
                {
                    <h1>@_featuredLabel</h1>
                    <div class="row">
                        @if (_featuredRecipes == null)
                        {
                            <div class="col-12"><em>@Localizer["LoadingRecipes"]</em></div>
                        }
                        else if (_featuredRecipes.Count == 0)
                        {
                            <div class="col-12">@Localizer["NoRecipesFound"]</div>
                        }
                        else
                        {
                            @foreach (var recipe in _featuredRecipes)
                            {
                                <div class="col-lg-6 mb-4">
                                    <div class="card h-100">
                                        <div class="row g-0">
                                            <div class="col-md-6 d-flex align-items-start justify-content-center p-2">
                                                <a href="@NavigateUrl()?id=@recipe.RecipeId&details=@recipe.Slug#top">
                                                    <img src="@(string.IsNullOrWhiteSpace(recipe.ImageURL) ? ModulePath() + "/images/no-image.png" : recipe.ImageURL)"
                                                         alt="@recipe.Name" 
                                                         class="img-fluid rounded featured-recipe-image mt-2" />
                                                </a>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="card-body d-flex flex-column">
                                                    <h5 class="card-title">
                                                        <a href="@NavigateUrl()?id=@recipe.RecipeId&details=@recipe.Slug#top">@recipe.Name</a>
                                                        <ActionLink Action="Edit"
                                                                    Parameters="@($"id={recipe.RecipeId}")"
                                                                    Security="SecurityAccessLevel.Edit" Text="Edit" IconName="pencil" IconOnly Class="btn btn-outline-secondary btn-sm"
                                                                    ResourceKey="Edit" />
                                                    </h5>
                                                    <div class="card-text">@Truncate(recipe.Description)</div>
                                                    <div class="mt-2">
                                                        
                                                        @{
                                                            var cats = _recipeCategoryLookup.TryGetValue(recipe.RecipeId, out var rcats) ? rcats : null;
                                                            if (cats != null && cats.Count > 0)
                                                            {
                                                                <span>@string.Join(", ", cats.Select(c => c.Category?.Name ?? ""))</span>
                                                            }
                                                            else
                                                            {
                                                                <span>@Localizer["Uncategorized"]</span>
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row g-0">
                                            <div class="col-md-12 text-center">
                                                <div class="mt-1 mb-2 text-center">
                                                    <a href="@NavigateUrl()?id=@recipe.RecipeId&details=@recipe.Slug#top" class="btn btn-outline-secondary btn-sm">View Details</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }

                @* Show recipes by category if a category is selected *@
                @if (_selectedCategoryId.HasValue && _recipesByCategory != null && _recipesByCategory.Count > 0)
                {
                    <h1>@_selectedCategory?.Name</h1>
                    <div>
                        @{
                            int rowNumber = 0;
                        }
                        @foreach (var recipe in _recipesByCategory)
                        {
                            <div class="row recipe-listing-row @(rowNumber % 2 == 0 ? "recipe-listing-alt" : "")">
                                <div class="col-lg-2 col-md-2 col-sm-5 recipe-listing-img text-center">
                                    <img src="@(string.IsNullOrWhiteSpace(recipe.ImageURL) ? ModulePath() + "/images/no-image.png" : recipe.ImageURL)"
                                         style="max-width:140px;" alt="@recipe.Name" />
                                </div>
                                <div class="col-lg-7 col-md-7 col-sm-5 recipe-listing-info">
                                    <div class="recipe-listing-title">
                                        <span>
                                            <a href="@NavigateUrl()?id=@recipe.RecipeId&details=@recipe.Slug#top"
                                               alt="@recipe.Name">@recipe.Name</a>
                                            <ActionLink Action="Edit"
                                                        Parameters="@($"id={recipe.RecipeId}")"
                                                        Security="SecurityAccessLevel.Edit" Text="Edit" IconName="pencil" IconOnly Class="btn btn-outline-secondary btn-sm"
                                                        ResourceKey="Edit" />
                                        </span>
                                    </div>
                                    <div class="recipe-listing-description">
                                        @recipe.Description
                                    </div>
                                </div>
                                <div class="col-lg-2 col-md-2 col-sm-11 recipe-listing-actions">
                                    <div class="text-center">
                                        <a href="@NavigateUrl()?id=@recipe.RecipeId&details=@recipe.Slug#top" class="btn btn-outline-secondary btn-sm">View Details</a>
                                    </div>
                                </div>
                            </div>
                            rowNumber++;
                        }
                    </div>
                }
                else if (_selectedCategoryId.HasValue && (_recipesByCategory == null || _recipesByCategory.Count == 0))
                {
                    <div class="alert alert-info">@Localizer["NoRecipesFound"]</div>
                }
            }
        </div>
        <div class="col-lg-3" style="padding-left: 20px; padding-top: 40px;">
            @RenderCategoryNavigation(_categories)

            @RenderTagNavigation(_tags)
        </div>
    </div>
</div>

@code {
    public override string RenderMode => RenderModes.Static;

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    private List<Recipe> _featuredRecipes;
    private List<Recipe> _recipesByCategory;
    private List<CategoryModel> _categories = new();
    private List<Tag> _tags = new();
    private List<RecipeCategory> _recipeCategories = new();
    private Dictionary<int, List<RecipeCategory>> _recipeCategoryLookup = new();

    private int? _selectedCategoryId;
    private int? _selectedRecipeId;
    private CategoryModel _selectedCategory;
    private Recipe _selectedRecipe;
    private List<RecipeCategory> _selectedRecipeCategories = new();
    private List<RecipeIngredient> _selectedRecipeIngredients = new();
    private List<Step> _selectedRecipeSteps = new();

    private string _featuredLabel = "Featured Recipes";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _featuredLabel = SettingService.GetSetting(ModuleState.Settings, "FeaturedLabel", "Featured Recipes");

            _categories = await RecipeService.GetCategoriesAsync(ModuleState.ModuleId);
            _tags = await RecipeService.GetTagsAsync(ModuleState.ModuleId); // <-- Load tags

            // Parse categoryId from query string
            if (PageState.QueryString.ContainsKey("catId") && int.TryParse(PageState.QueryString["catId"], out var catId))
            {
                _selectedCategoryId = catId;
                _selectedRecipeId = null;
                _selectedCategory = _categories.FirstOrDefault(c => c.CategoryId == catId);
                _recipesByCategory = await GetRecipesByCategoryAsync(catId);
                SetPageTitle(_selectedCategory?.Name ?? Localizer["Category"] + " - " + Localizer["Recipes"]);
            }
            // Parse recipeId from query string
            else if (PageState.QueryString.ContainsKey("id") && int.TryParse(PageState.QueryString["id"], out var recipeId))
            {
                _selectedCategoryId = null;
                _selectedRecipeId = recipeId;
                _selectedRecipe = await RecipeService.GetRecipeAsync(recipeId, ModuleState.ModuleId);
                _selectedRecipeCategories = await RecipeService.GetRecipeCategoriesAsync(recipeId, ModuleState.ModuleId);
                _selectedRecipeIngredients = await RecipeService.GetRecipeIngredientsAsync(recipeId, ModuleState.ModuleId);
                _selectedRecipeSteps = await RecipeService.GetStepsAsync(recipeId, ModuleState.ModuleId);
                SetPageTitle(_selectedRecipe?.Name ?? Localizer["RecipeDetails"]);
            }
            else
            {
                _selectedRecipeId = null;
                _selectedCategoryId = null;
                _featuredRecipes = (await RecipeService.GetRecipesAsync(ModuleState.ModuleId))
                    .Where(r => r.IsFeatured && r.IsActive)
                    .OrderByDescending(r => r.ModifiedOn)
                    .ToList();

                // Build RecipeCategory lookup for featured recipes
                _recipeCategories = new List<RecipeCategory>();
                foreach (var recipe in _featuredRecipes)
                {
                    var categories = await RecipeService.GetRecipeCategoriesAsync(recipe.RecipeId, ModuleState.ModuleId);
                    _recipeCategories.AddRange(categories);
                }
                _recipeCategoryLookup = _recipeCategories
                    .GroupBy(rc => rc.RecipeId)
                    .ToDictionary(g => g.Key, g => g.ToList());
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Recipes {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task<List<Recipe>> GetRecipesByCategoryAsync(int categoryId)
    {
        var allRecipes = await RecipeService.GetRecipesAsync(ModuleState.ModuleId);
        var recipesInCategory = new List<Recipe>();
        foreach (var recipe in allRecipes)
        {
            var categories = await RecipeService.GetRecipeCategoriesAsync(recipe.RecipeId, ModuleState.ModuleId);
            if (categories.Any(c => c.CategoryId == categoryId))
            {
                recipesInCategory.Add(recipe);
            }
        }
        return recipesInCategory;
    }

    private string FormatQuantity(decimal quantity)
    {
        // Handle whole numbers
        if (quantity % 1 == 0)
            return ((int)quantity).ToString();

        // Get whole and fractional parts
        int whole = (int)Math.Floor(quantity);
        decimal fraction = quantity - whole;

        // Common fractions
        var fractions = new Dictionary<decimal, string>
    {
        { 0.5m, "1/2" },
        { 0.25m, "1/4" },
        { 0.75m, "3/4" },
        { 0.333m, "1/3" },
        { 0.666m, "2/3" },
        { 0.2m, "1/5" },
        { 0.4m, "2/5" },
        { 0.6m, "3/5" },
        { 0.8m, "4/5" }
    };

        string fractionStr = null;
        foreach (var kvp in fractions)
        {
            if (Math.Abs(fraction - kvp.Key) < 0.01m)
            {
                fractionStr = kvp.Value;
                break;
            }
        }

        // If not a common fraction, try to convert to x/y
        if (fractionStr == null && fraction > 0)
        {
            int denominator = 1;
            decimal temp = fraction;
            while (temp % 1 != 0 && denominator <= 32)
            {
                denominator *= 2;
                temp = fraction * denominator;
            }
            if (denominator <= 32 && temp % 1 == 0)
            {
                int numerator = (int)Math.Round(fraction * denominator);
                fractionStr = $"{numerator}/{denominator}";
            }
            else
            {
                fractionStr = fraction.ToString("0.##");
            }
        }

        if (whole > 0 && !string.IsNullOrEmpty(fractionStr))
            return $"{whole} & {fractionStr}";
        else if (whole > 0)
            return whole.ToString();
        else
            return fractionStr ?? quantity.ToString("0.##");
    }

    private string Truncate(string value, int maxLength = 70)
    {
        if (string.IsNullOrEmpty(value)) return string.Empty;
        return value.Length > maxLength
            ? value.Substring(0, maxLength) + " . . . "
            : value;
    }

    private RenderFragment RenderTagNavigation(IEnumerable<Tag> items) => builder =>
    {
        int seq = 0;
        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "tag-nav");
        builder.OpenElement(seq++, "h4");
        builder.AddContent(seq++, Localizer["Tags"]);
        builder.CloseElement(); // h4

        builder.OpenElement(seq++, "ul");
        builder.AddAttribute(seq++, "class", "list-inline");
        foreach (var item in items)
        {
            builder.OpenElement(seq++, "li");
            builder.AddAttribute(seq++, "class", "list-inline-item badge bg-secondary mb-2 fs-6");
            builder.OpenElement(seq++, "a");
            builder.AddAttribute(seq++, "href", NavigateUrl() + $"?tagId={item.TagId}&details={item.Name.Replace(" ", "-")}#top");
            builder.AddAttribute(seq++, "class", "tagLinks text-white");
            builder.AddContent(seq++, item.Name);
            builder.CloseElement(); // a
            builder.CloseElement(); // li
        }
        builder.CloseElement(); // ul
        builder.CloseElement(); // div
    };

    private RenderFragment RenderCategoryNavigation(IEnumerable<CategoryModel> items) => builder =>
    {
        
        int seq = 0;
        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "category-nav");
        builder.OpenElement(seq++, "h4");
        builder.AddContent(seq++, Localizer["Categories"]);
        builder.CloseElement(); // h4

        @foreach (var item in items)
        {
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "category-link");
            builder.OpenElement(seq++, "a");
            builder.AddAttribute(seq++, "href", NavigateUrl() + $"?catId={item.CategoryId}&details={item.Slug}#top");
            builder.AddAttribute(seq++, "class", "categoryLinks");
            builder.AddContent(seq++, item.Name);
            builder.CloseElement(); // a
            builder.CloseElement(); // div
        }
        builder.CloseElement(); // category-nav
    };
}