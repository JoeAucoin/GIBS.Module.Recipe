@using GIBS.Module.Recipe.Services
@using GIBS.Module.Recipe.Models
@using CategoryModel = GIBS.Module.Recipe.Models.Category

@namespace GIBS.Module.Recipe
@inherits ModuleBase
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Category> Localizer

<h3>Categories</h3>

@if (_categories == null)
{
    <p><em>@Localizer["Loading..."]</em></p>
}
else
{
    <div class="row">
        <!-- Form Column -->
        <div class="col-lg-5 col-md-5 mb-3">
            <div class="card">
                <div class="card-header">@(_editingCategory == null || _editingCategory.CategoryId == 0 ? "Add New Category" : "Edit Category")</div>
                <div class="card-body">
                    <div class="mb-2">
                        <Label For="name" HelpText="Enter the category name">Name:</Label>
                        <input id="name" class="form-control" @bind="_editingCategory.Name" @oninput="OnNameInput" required />
                    </div>
                    <div class="mb-2">
                        <Label For="slug" HelpText="Auto-generated from category name.">Slug:</Label>
                        <input id="slug" class="form-control" @bind="_editingCategory.Slug" />
                    </div>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-success" @onclick="SaveCategory">@(_editingCategory == null || _editingCategory.CategoryId == 0 ? Localizer["Add"] : Localizer["Update"])</button>
                    @if (_editingCategory != null && _editingCategory.CategoryId != 0)
                    {
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">@Localizer["Cancel"]</button>
                    }
                </div>
            </div>

            <br />
            <br />
            <ActionLink Action="List" Security="SecurityAccessLevel.Edit" Text="Return to Dashboard" ResourceKey="Cancel" />
        </div>
        <!-- Table Column -->
        <div class="col-lg-7 col-md-7">
            <Pager Items="@_categories">
                <Header>
                <th>Name</th>
                <th>Slug</th>
                <th>Created</th>
                <th></th>
                </Header>
                <Row>
                    <td>@context.Name</td>
                    <td>@context.Slug</td>
                    <td>@context.CreatedOn.ToLocalTime().ToString("g")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditCategory(context)">@Localizer["Edit"]</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCategory(context.CategoryId)">@Localizer["Delete"]</button>
                    </td>
                </Row>
            </Pager>
        </div>
    </div>
}

@code {
    private List<CategoryModel> _categories;
    private CategoryModel _editingCategory = new CategoryModel();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        CancelEdit();
    }

    private async Task LoadCategories()
    {
        _categories = await RecipeService.GetCategoriesAsync(ModuleState.ModuleId);
    }

    private void OnNameInput(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "";
        _editingCategory.Name = value;
        _editingCategory.Slug = GenerateSlug(value);
    }

    private string GenerateSlug(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return "";
        var slug = new string(input.ToLower().Select(c =>
            (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') ? c :
            (c == ' ' ? '-' : '\0')).Where(c => c != '\0').ToArray());
        slug = System.Text.RegularExpressions.Regex.Replace(slug, "-+", "-");
        slug = slug.Trim('-');
        return slug;
    }

    private void EditCategory(CategoryModel category)
    {
        _editingCategory = new CategoryModel
        {
            CategoryId = category.CategoryId,
            ModuleId = category.ModuleId,
            Name = category.Name,
            Slug = category.Slug
        };
    }

    private void CancelEdit()
    {
        _editingCategory = new CategoryModel { CategoryId = 0, ModuleId = ModuleState.ModuleId };
    }

    private async Task SaveCategory()
    {
        if (string.IsNullOrWhiteSpace(_editingCategory.Name))
        {
            AddModuleMessage("Please enter a category name.", MessageType.Warning);
            return;
        }

        if (_editingCategory.CategoryId == 0)
            await RecipeService.AddCategoryAsync(_editingCategory);
        else
            await RecipeService.UpdateCategoryAsync(_editingCategory);

        await LoadCategories();
        CancelEdit();
        StateHasChanged();
    }

    private async Task DeleteCategory(int categoryId)
    {
        await RecipeService.DeleteCategoryAsync(categoryId, ModuleState.ModuleId);
        await LoadCategories();
        CancelEdit();
    }
}