@using Oqtane.Modules.Controls
@using Oqtane.Models
@using Oqtane.Security
@using Oqtane.UI
@using GIBS.Module.Recipe.Services
@using GIBS.Module.Recipe.Models
@using GIBS.Module.Recipe.Models.DTOs
@using CategoryModel = GIBS.Module.Recipe.Models.Category

@namespace GIBS.Module.Recipe
@inherits ModuleBase
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@inject ISettingService SettingService
@inject IStringLocalizer<Edit> Localizer
@inject IFileService FileService

<form @ref="form" class="@(validated ? " was-validated" : "needs-validation")" novalidate>
    <div class="container">
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="name" HelpText="Enter a name for the recipe" ResourceKey="Name">Name: </Label>
            <div class="col-sm-9">
                <input id="name" class="form-control" @bind="@_name" @oninput="OnNameInput" required />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="description" HelpText="Enter a description for the recipe" ResourceKey="Description">Description: </Label>
            <div class="col-sm-9">
                <textarea id="description" class="form-control" @bind="@_description" rows="3"></textarea>
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="servings" HelpText="Enter the number of servings" ResourceKey="Servings">Servings: </Label>
            <div class="col-sm-3">
                <input id="servings" type="number" class="form-control" @bind="@_servings" />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="prepTime" HelpText="Enter the prep time" ResourceKey="PrepTime">Prep Time: </Label>
            <div class="col-sm-3">
                <input id="prepTime" class="form-control" @bind="@_prepTime" />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="cookTime" HelpText="Enter the cook time" ResourceKey="CookTime">Cook Time: </Label>
            <div class="col-sm-3">
                <input id="cookTime" class="form-control" @bind="@_cookTime" />
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="instructions" HelpText="Enter the recipe instructions" ResourceKey="Instructions">Notes/Suggestions: </Label>
            <div class="col-sm-9">
                <textarea id="instructions" class="form-control" @bind="@_instructions" rows="10"></textarea>
            </div>
        </div>

        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="upload" HelpText="Upload the file you want" ResourceKey="Label.UploadImage">Image: </Label>
            <div class="col-sm-9">
                <FileManager UploadMultiple="false" Filter="jpg,png,gif,jpeg"
                             FolderId="@_folderId"
                             ShowSuccess="true" ShowFolders="false" ShowFiles="false" ShowImage="true"
                             OnUpload="@HandleFileUpload" />
            </div>
        </div>

        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="imageURL" HelpText="Upload or enter an image URL." ResourceKey="Label.ImageURL">@Localizer["Label.ImageURL"]</Label>
            <div class="col-sm-9">
                <input id="imageURL" class="form-control mb-1" @bind="@_imageURL" placeholder="Paste or enter image URL" />

                @if (!string.IsNullOrEmpty(_imageURL))
                {
                    <img src="@_imageURL" alt="Image preview" style="max-width: 280px; max-height: 200px; margin-top: 5px; margin-bottom: 10px;" />
                }
            </div>
        </div>
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="slug" HelpText="Auto-generated from recipe name." ResourceKey="Label.Slug">@Localizer["Label.Slug"]</Label>
            <div class="col-sm-9">
                <input id="slug" class="form-control" @bind="_slug" />
            </div>
        </div>

        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="isFeatured" HelpText="Check if this is a featured item." ResourceKey="Label.IsFeatured">@Localizer["Label.IsFeatured"]</Label>
            <div class="col-sm-9">
                <input id="isFeatured" type="checkbox" class="form-check-input" @bind="_isFeatured" />
            </div>
        </div>

        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="isActive" HelpText="Check if this recipe is active." ResourceKey="Label.IsActive">@Localizer["Label.IsActive"]</Label>
            <div class="col-sm-9">
                <input id="isActive" type="checkbox" class="form-check-input" @bind="_isActive" />
            </div>
        </div>

        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="categories" HelpText="Select categories for this recipe">Categories:</Label>
            <div class="col-sm-9">
                @if (_allCategories != null)
                {
                    @foreach (var category in _allCategories)
                    {
                        <div class="form-check form-check-inline">
                            <input class="form-check-input"
                                   type="checkbox"
                                   id="cat_@category.CategoryId"
                                   value="@category.CategoryId"
                                   checked="@_selectedCategoryIds.Contains(category.CategoryId)"
                                   @onchange="e => ToggleCategory(category.CategoryId, ((ChangeEventArgs)e).Value)" />
                            <label class="form-check-label" for="cat_@category.CategoryId">@category.Name</label>
                        </div>
                    }
                }
            </div>
        </div>

    </div>
    <button type="button" class="btn btn-success" @onclick="Save">@Localizer["Save"]</button>
    <ActionLink Action="List" Security="SecurityAccessLevel.Edit" Text="Cancel" ResourceKey="Cancel" />
    <br /><br />
    @if (PageState.Action == "Edit")
    {

        <TabStrip>
            <TabPanel Name="Ingredients">
                <div class="card mt-3">
                    <div class="card-header">@(_editingIngredient == null ? "Add New Ingredient" : "Edit Ingredient")</div>
                    <div class="card-body">
                        <div class="row mb-2">
                            <div class="col">
                                <Label For="ingredient" HelpText="Select an ingredient">Ingredient:</Label><button type="button" class="btn btn-sm btn-success float-end" @onclick="ShowAddNewIngredientDialog">+</button>
                                <select id="ingredient" class="form-select" @bind="@_newRecipeIngredient.IngredientId">
                                    <option value="0">- Select Ingredient -</option>        
                                    @if (_allIngredients != null)
                                    {
                                        @foreach (var ingredient in _allIngredients)
                                        {
                                            <option value="@ingredient.IngredientId">@ingredient.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <Label For="quantity" HelpText="Enter quantity">Quantity:</Label>
                                <input id="quantity" type="number" class="form-control" @bind="@_newRecipeIngredient.Quantity" />
                            </div>
                            <div class="col">
                                <Label For="unit" HelpText="Select a unit">Unit:</Label> <button type="button" class="btn btn-sm btn-success float-end" @onclick="ShowAddNewUnitDialog">+</button>
                               <select id="unit" class="form-select" @bind="@_newRecipeIngredient.UnitId">
                                <option value="0">- Select Unit -</option>
                                @if (_allUnits != null)
                                {
                                    @foreach (var unit in _allUnits)
                                    {
                                        <option value="@unit.UnitId">@unit.Name</option>
                                    }
                                }
                            </select>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col">
                                <Label For="notes" HelpText="Enter any notes">Notes:</Label>
                                <input id="notes" class="form-control" @bind="@_newRecipeIngredient.Notes" />
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button type="button" class="btn btn-success" @onclick="SaveIngredient">@(_editingIngredient == null ? "Add" : "Update")</button>
                        @if (_editingIngredient != null)
                        {
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        }
                    </div>
                </div>

                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Ingredient</th>
                            <th>Quantity</th>
                            <th>Unit</th>
                            <th>Notes</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_recipeIngredients != null)
                        {
                            @foreach (var ri in _recipeIngredients)
                            {
                                <tr>
                                    <td>@ri.Ingredient.Name</td>
                                    <td>@ri.Quantity</td>
                                    <td>@ri.Unit.Name</td>
                                    <td>@ri.Notes</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => EditIngredient(ri)">Edit</button>
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => DeleteIngredient(ri.RecipeIngredientId)">Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>

            </TabPanel>
            <TabPanel Name="Steps">
                <div class="card mt-3">
                    <div class="card-header">@(_editingStep == null ? "Add New Step" : "Edit Step")</div>
                    <div class="card-body">
                        <div class="row mb-2">
                            <div class="col-2">
                                <Label For="stepName" HelpText="The name of the step (auto-generated)">Name:</Label>
                                <input id="stepName" class="form-control" @bind="@_newStep.Name" />
                            </div>
                            <div class="col-10">
                                <Label For="stepInstructions" HelpText="Enter the instructions for the step">Instructions:</Label>
                                <textarea id="stepInstructions" class="form-control" @bind="@_newStep.Instructions" rows="3"></textarea>
                            </div>
                        </div>
                        <div class="row mb-1 align-items-center">
                            <Label Class="col-sm-2" For="stepUpload" HelpText="Upload an image for the step">Image: </Label>
                            <div class="col-sm-10">
                                <FileManager UploadMultiple="false" Filter="jpg,png,gif,jpeg"
                                             FolderId="@_folderId"
                                             ShowSuccess="true" ShowFolders="false" ShowFiles="false" ShowImage="true"
                                             OnUpload="@HandleStepFileUpload" />
                            </div>
                        </div>
                        <div class="row mb-1 align-items-center">
                            <Label Class="col-sm-2" For="stepImageURL" HelpText="Upload or enter an image URL.">Image URL:</Label>
                            <div class="col-sm-10">
                                <input id="stepImageURL" class="form-control mb-1" @bind="@_newStep.ImageURL" placeholder="Paste or enter image URL" />

                                @if (!string.IsNullOrEmpty(_newStep.ImageURL))
                                {
                                    <img src="@_newStep.ImageURL" alt="Image preview" style="max-width: 280px; max-height: 200px; margin-top: 5px; margin-bottom: 10px;" />
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button type="button" class="btn btn-success" @onclick="SaveStep">@(_editingStep == null ? "Add" : "Update")</button>
                        @if (_editingStep != null)
                        {
                            <button type="button" class="btn btn-secondary" @onclick="CancelEditStep">Cancel</button>
                        }
                    </div>
                </div>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Instructions</th>
                            <th>Image</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_steps != null)
                        {
                            @foreach (var step in _steps.OrderBy(s => s.Name))
                            {
                                <tr>
                                    <td style="width:84px;">@step.Name</td>
                                    <td>@step.Instructions</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(step.ImageURL))
                                        {
                                            <img src="@step.ImageURL" style="max-width: 100px; max-height: 75px;" />
                                        }
                                    </td>
                                    <td style="width:130px;">
                                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => EditStep(step)">Edit</button>
                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => DeleteStep(step.StepId)">Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>

            </TabPanel>
            <TabPanel Name="Tags">
                <div class="row mb-2">
                    <div class="col">
                        <Label For="tag" HelpText="Select a tag">Tag:</Label>
                        <button type="button" class="btn btn-sm btn-success float-end" @onclick="ShowAddNewTagDialog">+</button>
                        <select id="tag" class="form-select" @bind="_newRecipeTag.TagId">
                            <option value="0">- Select Tag -</option>
                            @if (_allTags != null)
                            {
                                @foreach (var tag in _allTags)
                                {
                                    <option value="@tag.TagId">@tag.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-success mt-4" @onclick="SaveRecipeTag">Add Tag</button>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Tag</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_recipeTags != null)
                                {
                                    @foreach (var rt in _recipeTags)
                                    {
                                        <tr>
                                            <td>@rt.Tag?.Name</td>
                                            <td>
                                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => DeleteRecipeTag(rt.RecipeTagId)">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </TabPanel>
        </TabStrip>
            @if (_showAddTagModal)
            {
                <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Add New Tag</h5>
                                <button type="button" class="btn-close" @onclick="CloseAddTagModal"></button>
                            </div>
                            <div class="modal-body">
                                <input class="form-control mb-2" placeholder="Tag Name" @bind="_newTagName" />
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" @onclick="AddNewTag">Add</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseAddTagModal">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
            }




       


        <hr />
    }
    @if (PageState.Action == "Edit")
    {
        <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
    }
</form>

@if (_showAddIngredientModal)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Ingredient</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddIngredientModal"></button>
                </div>
                <div class="modal-body">
                    <input class="form-control mb-2" placeholder="Ingredient Name" @bind="_newIngredientName" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddNewIngredient">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddIngredientModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showAddUnitModal)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Unit</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddUnitModal"></button>
                </div>
                <div class="modal-body">
                    <input class="form-control mb-2" placeholder="Unit Name" @bind="_newUnitName" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddNewUnit">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddUnitModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage Recipe";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    private ElementReference form;
    private bool validated = false;

    private int _id;
    private string _name;
    private string _description;
    private string _instructions;
    private int _servings;
    private string _prepTime;
    private string _cookTime;

    public string _slug;

    private List<RecipeIngredient> _recipeIngredients;
    private List<Ingredient> _allIngredients;
    private List<Unit> _allUnits;
    private RecipeIngredient _newRecipeIngredient = new RecipeIngredient();
    private RecipeIngredient _editingIngredient;

    private List<Step> _steps;
    private Step _newStep = new Step();
    private Step _editingStep;

    private string _createdby;
    private DateTime _createdon;
    private string _modifiedby;
    private DateTime _modifiedon;

    private int _folderId = 1;
    private int _imageMaxWidth; // Set your max width here
    private int _imageMaxHeight; // Set your max height here
    private bool _isActive = true; // Assuming you want to keep the recipe active by default
    private bool _isFeatured = false; // Assuming you want to keep the recipe not featured by default

    private string _imageURL;

    // Modal state for adding new ingredient
    private bool _showAddIngredientModal = false;
    private string _newIngredientName;

    // Modal state for adding new unit
    private bool _showAddUnitModal = false;
    private string _newUnitName;

    private List<CategoryModel> _allCategories;
    private List<RecipeCategory> _recipeCategories;
    private HashSet<int> _selectedCategoryIds = new HashSet<int>();

     // Tag/RecipeTag state
    private List<Tag> _allTags;
    private List<RecipeTag> _recipeTags;
    private RecipeTag _newRecipeTag = new RecipeTag();
    private bool _showAddTagModal = false;
    private string _newTagName;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Correctly parse the setting as an integer
            if (int.TryParse(SettingService.GetSetting(ModuleState.Settings, "ImageFolder", "1"), out int folderId))
            {
                _folderId = folderId;
            }
            else
            {
                // Handle the case where the setting is not a valid integer
                _folderId = 1; // Default value or handle error
            }

            if (!int.TryParse(SettingService.GetSetting(ModuleState.Settings, "ImageMaxWidth", "800"), out _imageMaxWidth))
            {
                _imageMaxWidth = 800;
            }
            if (!int.TryParse(SettingService.GetSetting(ModuleState.Settings, "ImageMaxHeight", "600"), out _imageMaxHeight))
            {
                _imageMaxHeight = 600;
            }

            await LoadCategories();

            if (PageState.Action == "Edit")
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                Models.Recipe recipe = await RecipeService.GetRecipeAsync(_id, ModuleState.ModuleId);
                if (recipe != null)
                {
                    _name = recipe.Name;
                    _description = recipe.Description;
                    _imageURL = recipe.ImageURL;
                    _instructions = recipe.Instructions;
                    _servings = recipe.Servings;
                    _prepTime = recipe.PrepTime;
                    _cookTime = recipe.CookTime;
                    _slug = recipe.Slug;
                    _isFeatured = recipe.IsFeatured;
                    _isActive = recipe.IsActive;

                    _createdby = recipe.CreatedBy;
                    _createdon = recipe.CreatedOn;
                    _modifiedby = recipe.ModifiedBy;
                    _modifiedon = recipe.ModifiedOn;

                    await LoadIngredients();
                    await LoadSteps();
                    _newStep.Name = $"Step {((_steps?.Count ?? 0) + 1).ToString("D2")}:";
                    
                }
          
                await LoadRecipeCategories();
                 await LoadTags();
                 await LoadRecipeTags();
        
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Recipe {RecipeId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

      private async Task LoadTags()
    {
        _allTags = await RecipeService.GetTagsAsync(ModuleState.ModuleId);
    }

    private async Task LoadRecipeTags()
    {
        if (_id > 0)
            _recipeTags = await RecipeService.GetRecipeTagsAsync(_id, ModuleState.ModuleId);
    }

    private Task ShowAddNewTagDialog()
    {
        _newTagName = string.Empty;
        _showAddTagModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void CloseAddTagModal()
    {
        _showAddTagModal = false;
        StateHasChanged();
    }

    private async Task AddNewTag()
    {
        if (!string.IsNullOrWhiteSpace(_newTagName))
        {
            var tag = new Tag
            {
                Name = _newTagName,
                ModuleId = ModuleState.ModuleId
            };
            var savedTag = await RecipeService.AddTagAsync(tag);
            await LoadTags();
            _showAddTagModal = false;
            StateHasChanged();

            if (savedTag != null)
            {
                _newRecipeTag.TagId = savedTag.TagId;
                StateHasChanged();
            }
        }
    }

    private async Task SaveRecipeTag()
    {
        if (_newRecipeTag.TagId > 0 && _id > 0)
        {
            _newRecipeTag.ModuleId = ModuleState.ModuleId;
            _newRecipeTag.RecipeId = _id;
            await RecipeService.AddRecipeTagAsync(_newRecipeTag);
            await LoadRecipeTags();
            _newRecipeTag = new RecipeTag();
            StateHasChanged();
        }
    }

    private async Task DeleteRecipeTag(int recipeTagId)
    {
        await RecipeService.DeleteRecipeTagAsync(recipeTagId, ModuleState.ModuleId);
        await LoadRecipeTags();
        StateHasChanged();
    }


    private async Task UpdateRecipeCategories()
    {
        // Remove all existing associations
        if (_recipeCategories != null)
        {
            foreach (var rc in _recipeCategories)
            {
                await RecipeService.DeleteRecipeCategoryAsync(rc.RecipeCategoryId, ModuleState.ModuleId);
            }
        }

        // Add selected associations
        foreach (var categoryId in _selectedCategoryIds)
        {
            var newRc = new RecipeCategory
            {
                ModuleId = ModuleState.ModuleId,
                RecipeId = _id,
                CategoryId = categoryId
            };
            await RecipeService.AddRecipeCategoryAsync(newRc);
        }

        // Reload associations
        await LoadRecipeCategories();
    }

    private async Task LoadCategories()
    {
        _allCategories = await RecipeService.GetCategoriesAsync(ModuleState.ModuleId);
    }

    private async Task LoadRecipeCategories()
    {
        _recipeCategories = await RecipeService.GetRecipeCategoriesAsync(_id, ModuleState.ModuleId);
        _selectedCategoryIds = _recipeCategories != null
            ? _recipeCategories.Select(rc => rc.CategoryId).ToHashSet()
            : new HashSet<int>();
    }

    private void ToggleCategory(int categoryId, object value)
    {
        bool isChecked = value is bool b ? b : value?.ToString() == "true";
        if (isChecked)
            _selectedCategoryIds.Add(categoryId);
        else
            _selectedCategoryIds.Remove(categoryId);
    }

    private async Task LoadIngredients()
    {
        _recipeIngredients = await RecipeService.GetRecipeIngredientsAsync(_id, ModuleState.ModuleId);
        _allIngredients = await RecipeService.GetIngredientsAsync(ModuleState.ModuleId);
        _allUnits = await RecipeService.GetUnitsAsync(ModuleState.ModuleId);
    }

    private async Task LoadSteps()
    {
        _steps = await RecipeService.GetStepsAsync(_id, ModuleState.ModuleId);
    }

    private async Task Save()
{
    try
    {
        validated = true;
        var interop = new Oqtane.UI.Interop(JSRuntime);
        if (await interop.FormValid(form))
        {
            if (PageState.Action == "Add")
            {
                Models.Recipe recipe = new Models.Recipe();
                recipe.ModuleId = ModuleState.ModuleId;
                recipe.Name = _name;
                recipe.Description = _description;
                recipe.Instructions = _instructions;
                recipe.Servings = _servings;
                recipe.PrepTime = _prepTime;
                recipe.CookTime = _cookTime;
                recipe.Slug = _slug;
                recipe.ImageURL = _imageURL;
                recipe.IsActive = _isActive;
                recipe.IsFeatured = _isFeatured;
                recipe = await RecipeService.AddRecipeAsync(recipe);
                await logger.LogInformation("Recipe Added {Recipe}", recipe);

                // Set _id to new RecipeId
                _id = recipe.RecipeId;

                // Save selected categories for the new recipe
                await UpdateRecipeCategories();

                PageState.Action = "Edit";
                StateHasChanged();
            }
            else
            {
                Models.Recipe recipe = await RecipeService.GetRecipeAsync(_id, ModuleState.ModuleId);
                recipe.Name = _name;
                recipe.Description = _description;
                recipe.Instructions = _instructions;
                recipe.Servings = _servings;
                recipe.PrepTime = _prepTime;
                recipe.CookTime = _cookTime;
                recipe.Slug = _slug;
                recipe.ImageURL = _imageURL;
                recipe.IsActive = _isActive;
                recipe.IsFeatured = _isFeatured;
                await RecipeService.UpdateRecipeAsync(recipe);

                // Update RecipeCategory associations
                await UpdateRecipeCategories();

                await logger.LogInformation("Recipe Updated {Recipe}", new RecipeDto
                {
                    RecipeId = recipe.RecipeId,
                    ModuleId = recipe.ModuleId,
                    Name = recipe.Name,
                    Description = recipe.Description,
                    Instructions = recipe.Instructions,
                    Servings = recipe.Servings,
                    PrepTime = recipe.PrepTime,
                    CookTime = recipe.CookTime,
                    Slug = recipe.Slug,
                    ImageURL = recipe.ImageURL,
                    IsFeatured = recipe.IsFeatured,
                    IsActive = recipe.IsActive,
                    CreatedBy = recipe.CreatedBy,
                    CreatedOn = recipe.CreatedOn,
                    ModifiedBy = recipe.ModifiedBy,
                    ModifiedOn = recipe.ModifiedOn
                });
                AddModuleMessage(Localizer["Success.Update"], MessageType.Success);
                validated = false;
            }
        }
        else
        {
            AddModuleMessage(Localizer["Message.SaveValidation"], MessageType.Warning);
        }
    }
    catch (Exception ex)
    {
        await logger.LogError(ex, "Error Saving Recipe {Error}", ex.Message);
        AddModuleMessage(Localizer["Message.SaveError"], MessageType.Error);
    }
}

    private async Task SaveIngredient()
    {
        try
        {
            // Validate ingredient selection
            if (_newRecipeIngredient.IngredientId == 0 || !_allIngredients.Any(i => i.IngredientId == _newRecipeIngredient.IngredientId))
            {
                AddModuleMessage("Please select a valid ingredient.", MessageType.Warning);
                return;
            }
            
            if (_newRecipeIngredient.IngredientId != 0 && _newRecipeIngredient.UnitId != 0 && _newRecipeIngredient.Quantity > 0)
            {
                if (_editingIngredient == null) // Add new
                {
                    _newRecipeIngredient.RecipeId = _id;
                    _newRecipeIngredient.ModuleId = ModuleState.ModuleId;
                    await RecipeService.AddRecipeIngredientAsync(_newRecipeIngredient);
                }
                else // Update existing
                {
                    _editingIngredient.IngredientId = _newRecipeIngredient.IngredientId;
                    _editingIngredient.Quantity = _newRecipeIngredient.Quantity;
                    _editingIngredient.UnitId = _newRecipeIngredient.UnitId;
                    _editingIngredient.Notes = _newRecipeIngredient.Notes;
                    await RecipeService.UpdateRecipeIngredientAsync(_editingIngredient);
                }
                await LoadIngredients();
                CancelEdit();
                _newRecipeIngredient.IngredientId = 0; // Reset ingredient select
                _newRecipeIngredient.UnitId = 0; // Reset unit select
                StateHasChanged();
                
            }
            else
            {
                AddModuleMessage("Please select an ingredient, unit, and specify a valid quantity.", MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error saving ingredient: {Error}", ex.Message);
            AddModuleMessage("Error saving ingredient.", MessageType.Error);
        }
    }

    private void EditIngredient(RecipeIngredient ingredient)
    {
        _editingIngredient = ingredient;
        _newRecipeIngredient = new RecipeIngredient
        {
            RecipeIngredientId = ingredient.RecipeIngredientId,
            IngredientId = ingredient.IngredientId,
            Quantity = ingredient.Quantity,
            UnitId = ingredient.UnitId,
            Notes = ingredient.Notes
        };
    }

    private async void HandleFileUpload(int fileId)
    {
        if (fileId > 0)
        {
            var uploadedFile = await FileService.GetFileAsync(fileId);
            if (uploadedFile != null)
            {
                // Check if the image exceeds the maximum dimensions from settings
                if (uploadedFile.ImageWidth > _imageMaxWidth || uploadedFile.ImageHeight > _imageMaxHeight)
                {
                    try
                    {
                        var resizedFile = await RecipeService.ResizeImageAsync(uploadedFile.FileId, _imageMaxWidth, _imageMaxHeight, ModuleState.ModuleId);
                        if (resizedFile != null)
                        {
                            _imageURL = resizedFile.Url;
                        }
                        else
                        {
                            // Fallback to original image if resize fails
                            _imageURL = uploadedFile.Url;
                            AddModuleMessage("Image resizing failed. Using original image.", MessageType.Warning);
                        }
                    }
                    catch (Exception ex)
                    {
                        AddModuleMessage($"Error resizing image: {ex.Message}", MessageType.Error);
                        _imageURL = uploadedFile.Url; // Fallback to original image
                    }
                }
                else
                {
                    _imageURL = uploadedFile.Url;
                }
            }
            else
            {
                _imageURL = null;
            }
            StateHasChanged();
        }
    }

    private void OnNameInput(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "";
        _name = value;
        _slug = GenerateSlug(value);
    }

    private string GenerateSlug(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return "";
        // Convert to lower, replace spaces with '-', allow a-z and 0-9, remove other chars
        var slug = new string(input.ToLower().Select(c =>
            (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') ? c :
            (c == ' ' ? '-' : '\0')).Where(c => c != '\0').ToArray());
        // Replace multiple dashes with single dash
        slug = System.Text.RegularExpressions.Regex.Replace(slug, "-+", "-");
        // Trim dashes
        slug = slug.Trim('-');
        return slug;
    }

    private void CancelEdit()
    {
        _editingIngredient = null;
        _newRecipeIngredient = new RecipeIngredient();
    }

    private async Task DeleteIngredient(int recipeIngredientId)
    {
        try
        {
            await RecipeService.DeleteRecipeIngredientAsync(recipeIngredientId, ModuleState.ModuleId);
            await LoadIngredients();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error deleting ingredient: {Error}", ex.Message);
            AddModuleMessage("Error deleting ingredient.", MessageType.Error);
        }
    }

    private async void HandleStepFileUpload(int fileId)
    {
        if (fileId > 0)
        {
            var uploadedFile = await FileService.GetFileAsync(fileId);
            if (uploadedFile != null)
            {
                // Check if the image exceeds the maximum dimensions from settings
                if (uploadedFile.ImageWidth > _imageMaxWidth || uploadedFile.ImageHeight > _imageMaxHeight)
                {
                    try
                    {
                        var resizedFile = await RecipeService.ResizeImageAsync(uploadedFile.FileId, _imageMaxWidth, _imageMaxHeight, ModuleState.ModuleId);
                        if (resizedFile != null)
                        {
                            _newStep.ImageURL = resizedFile.Url;
                        }
                        else
                        {
                            // Fallback to original image if resize fails
                            _newStep.ImageURL = uploadedFile.Url;
                            AddModuleMessage("Image resizing failed. Using original image.", MessageType.Warning);
                        }
                    }
                    catch (Exception ex)
                    {
                        AddModuleMessage($"Error resizing image: {ex.Message}", MessageType.Error);
                        _newStep.ImageURL = uploadedFile.Url; // Fallback to original image
                    }
                }
                else
                {
                    _newStep.ImageURL = uploadedFile.Url;
                }
            }
            else
            {
                _newStep.ImageURL = null;
            }
            StateHasChanged();
        }
    }


    private Task ShowAddNewIngredientDialog()
    {
        _newIngredientName = string.Empty;
        _showAddIngredientModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task ShowAddNewUnitDialog()
    {
        _newUnitName = string.Empty;
        _showAddUnitModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task AddNewIngredient()
    {
        if (!string.IsNullOrWhiteSpace(_newIngredientName))
        {
            var ingredient = new Ingredient
            {
                Name = _newIngredientName,
                ModuleId = ModuleState.ModuleId
            };
            var savedIngredient = await RecipeService.AddIngredientAsync(ingredient);
            await LoadIngredients();
            _showAddIngredientModal = false;
            StateHasChanged();

            if (savedIngredient != null)
            {
                _newRecipeIngredient.IngredientId = savedIngredient.IngredientId;
                StateHasChanged();
            }
        }
    }

    private async Task AddNewUnit()
    {
        if (!string.IsNullOrWhiteSpace(_newUnitName))
        {
            var unit = new Unit
            {
                Name = _newUnitName,
                ModuleId = ModuleState.ModuleId
            };
            var savedUnit = await RecipeService.AddUnitAsync(unit);
            await LoadIngredients();
            _showAddUnitModal = false;
            StateHasChanged();

            if (savedUnit != null)
            {
                _newRecipeIngredient.UnitId = savedUnit.UnitId;
                StateHasChanged();
            }
        }
    }

    private void CloseAddIngredientModal()
    {
        _showAddIngredientModal = false;
        StateHasChanged();
    }

    private void CloseAddUnitModal()
    {
        _showAddUnitModal = false;
        StateHasChanged();
    }

    private async Task SaveStep()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(_newStep.Instructions))
            {
                if (_editingStep == null) // Add new
                {
                    _newStep.RecipeId = _id;
                    _newStep.ModuleId = ModuleState.ModuleId;
                    await RecipeService.AddStepAsync(_newStep);
                }
                else // Update existing
                {
                    _editingStep.Name = _newStep.Name;
                    _editingStep.Instructions = _newStep.Instructions;
                    _editingStep.ImageURL = _newStep.ImageURL;
                    await RecipeService.UpdateStepAsync(_editingStep);
                }
                await LoadSteps();
                CancelEditStep();
            }
            else
            {
                AddModuleMessage("Please enter valid instructions for the step.", MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error saving step: {Error}", ex.Message);
            AddModuleMessage("Error saving step.", MessageType.Error);
        }
    }

    private void EditStep(Step step)
    {
        _editingStep = step;
        _newStep = new Step
        {
            StepId = step.StepId,
            Name = step.Name,
            Instructions = step.Instructions,
            ImageURL = step.ImageURL
        };
    }

    private void CancelEditStep()
    {
        _editingStep = null;
        _newStep = new Step();
        if (_steps != null)
        {
            _newStep.Name = $"Step {(_steps.Count + 1).ToString("D2")}:";
        }
    }

    private async Task DeleteStep(int stepId)
    {
        try
        {
            await RecipeService.DeleteStepAsync(stepId, ModuleState.ModuleId);
            await LoadSteps();
            _newStep.Name = $"Step {(_steps.Count + 1).ToString("D2")}:";
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error deleting step: {Error}", ex.Message);
            AddModuleMessage("Error deleting step.", MessageType.Error);
        }
    }

    private string ReturnUrl()
    {
        if (ModuleState != null)
        {
            return (!string.IsNullOrEmpty(NavigateUrl() + "/*/" + ModuleState.ModuleId + "/Edit")) ? NavigateUrl() + "/*/" + ModuleState.ModuleId + "/Edit" : NavigateUrl();
        }
        else
        {
            return NavigateUrl();
        }
        //    return NavigateUrl();
    }
}